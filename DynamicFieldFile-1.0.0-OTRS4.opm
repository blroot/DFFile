<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>DynamicFieldFile</Name>
    <Version>1.0.0</Version>
    <Vendor>OTRS 365</Vendor>
    <URL>http://opgk.rzeszow.pl/</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 2, June 1991</License>
    <Description Lang="en">DynamicFieldFile Module</Description>
    <Description Lang="pl">DynamicFieldFile</Description>
    <Framework>4.0.x</Framework>
    <CodeInstall Type="post">
	</CodeInstall>
    <CodeUpgrade Type="post">
	</CodeUpgrade>
    <CodeUninstall Type="pre">
	</CodeUninstall>
    <BuildDate>2015-07-29 11:36:21</BuildDate>
    <BuildHost>tomek-VirtualBox</BuildHost>
    <Filelist>
        <File Location="Kernel/Output/HTML/Standard/AdminDynamicFieldFile.tt" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AdminDynamicFieldFile.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Modules/AgentDFFileAttachment.pm" Permission="644" Encode="Base64">IyAtLQ0KIyBLZXJuZWwvTW9kdWxlcy9BZ2VudERGRmlsZUF0dGFjaG1lbnQucG0gLSB0byBnZXQgdGhlIGF0dGFjaG1lbnRzDQojIENvcHlyaWdodCAoQykgMjAwMS0yMDE0IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8NCiMgLS0NCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUNCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQ0KIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Lg0KIyAtLQ0KDQpwYWNrYWdlIEtlcm5lbDo6TW9kdWxlczo6QWdlbnRERkZpbGVBdHRhY2htZW50Ow0KIyMgbm9maWx0ZXIoVGlkeUFsbDo6UGx1Z2luOjpPVFJTOjpQZXJsOjpQcmludCkNCg0KdXNlIHN0cmljdDsNCnVzZSB3YXJuaW5nczsNCnVzZSBEYXRhOjpEdW1wZXI7DQp1c2UgS2VybmVsOjpTeXN0ZW06OkZpbGVUZW1wOw0KdXNlIEtlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGRGaWxlVmFsdWU7DQoNCnN1YiBuZXcgew0KICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87DQoNCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QNCiAgICBteSAkU2VsZiA9IHslUGFyYW19Ow0KICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsNCg0KICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMNCiAgICBmb3IgKHF3KFBhcmFtT2JqZWN0IERCT2JqZWN0IFRpY2tldE9iamVjdCBMYXlvdXRPYmplY3QgTG9nT2JqZWN0IEVuY29kZU9iamVjdCBDb25maWdPYmplY3QpKSB7DQogICAgICAgIGlmICggISRTZWxmLT57JF99ICkgew0KICAgICAgICAgICAgJFNlbGYtPntMYXlvdXRPYmplY3R9LT5GYXRhbEVycm9yKCBNZXNzYWdlID0+ICJHb3Qgbm8gJF8hIiApOw0KICAgICAgICB9DQogICAgfQ0KCQ0KICAgICRTZWxmLT57RHluYW1pY0ZpZWxkRmlsZVZhbHVlT2JqZWN0fSA9ICBLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkRmlsZVZhbHVlLT5uZXcoICV7JFNlbGZ9ICk7DQogICAgJFNlbGYtPntMb2FkRXh0ZXJuYWxJbWFnZXN9ID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKA0KICAgICAgICBQYXJhbSA9PiAnTG9hZEV4dGVybmFsSW1hZ2VzJw0KICAgICkgfHwgMDsNCg0KICAgIHJldHVybiAkU2VsZjsNCn0NCg0Kc3ViIFJ1biB7DQogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsNCgkNCgkkU2VsZi0+e0ZpZWxkSUR9ID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnRmllbGRJRCcgKTsNCiAgICAkU2VsZi0+e09iamVjdElEfSA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ09iamVjdElEJyApOw0KICAgICRTZWxmLT57U3ViYWN0aW9ufSA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ1N1YmFjdGlvbicgKTsNCiAgICAkU2VsZi0+e0Jhc2VBY3Rpb259ID0gJFNlbGYtPntQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAnQmFzZUFjdGlvbicgKTsNCiAgICAkU2VsZi0+e1RpY2tldElEfSA9ICRTZWxmLT57UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ1RpY2tldElEJyApOw0KDQogICAgIyBjaGVjayBwYXJhbXMNCiAgICBpZiAoICEkU2VsZi0+e09iamVjdElEfSB8fCAhJFNlbGYtPntGaWVsZElEfSApIHsNCiAgICAgICAgJFNlbGYtPntMb2dPYmplY3R9LT5Mb2coDQogICAgICAgICAgICBNZXNzYWdlICA9PiAnT2JqZWN0SUQgYW5kIEZpZWxkSUQgYXJlIG5lZWRlZCEnLA0KICAgICAgICAgICAgUHJpb3JpdHkgPT4gJ2Vycm9yJywNCiAgICAgICAgKTsNCiAgICAgICAgcmV0dXJuICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RXJyb3JTY3JlZW4oKTsNCiAgICB9DQoJDQoJaWYoJFNlbGYtPntTdWJhY3Rpb259ICYmICRTZWxmLT57U3ViYWN0aW9ufSBlcSAnRGVsZXRlJyl7DQoJCW15ICRERlZhbHVlID0gJFNlbGYtPntEeW5hbWljRmllbGRGaWxlVmFsdWVPYmplY3R9LT5WYWx1ZURlbGV0ZSgNCgkJCU9iamVjdElEID0+ICRTZWxmLT57T2JqZWN0SUR9LA0KCQkJRmllbGRJRCAgPT4gJFNlbGYtPntGaWVsZElEfSwNCgkJCUZpbGVJRCAgPT4gJFNlbGYtPntGaWxlSUR9LA0KCQkJVXNlcklEICA9PiAkU2VsZi0+e1VzZXJJRH0sDQoJCSk7DQoNCgkJIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPlJlZGlyZWN0KCBPUCA9PiAiO0FjdGlvbj0kU2VsZi0+e0Jhc2VBY3Rpb259O1RpY2tldElEPSRTZWxmLT57VGlja2V0SUR9IiApOw0KCX1lbHNlew0KCQkjIGdldCBhIGF0dGFjaG1lbnQNCgkJbXkgJURhdGE7DQoJCW15ICRERlZhbHVlID0gJFNlbGYtPntEeW5hbWljRmllbGRGaWxlVmFsdWVPYmplY3R9LT5WYWx1ZUdldEZpbGUoDQoJCQlPYmplY3RJRCA9PiAkU2VsZi0+e09iamVjdElEfSwNCgkJCUZpZWxkSUQgID0+ICRTZWxmLT57RmllbGRJRH0sDQoJCSk7DQoJCQ0KCQkkRGF0YXtDb250ZW50fSA9ICRERlZhbHVlLT5bMF0tPntDb250ZW50fTsNCgkJJERhdGF7Q29udGVudFR5cGV9ID0gJERGVmFsdWUtPlswXS0+e0NvbnRlbnRUeXBlfTsNCgkJJERhdGF7RmlsZW5hbWV9ID0gJERGVmFsdWUtPlswXS0+e0ZpbGVuYW1lfTsNCg0KCQlyZXR1cm4gJFNlbGYtPntMYXlvdXRPYmplY3R9LT5BdHRhY2htZW50KCVEYXRhKTsNCgl9DQp9DQoNCjE7DQo=</File>
        <File Location="Kernel/Config/Files/DFFile.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiID8+CjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIxLjAiIGluaXQ9IkFwcGxpY2F0aW9uIj4KCgk8Q29uZmlnSXRlbSBOYW1lPSJGcm9udGVuZDo6TW9kdWxlIyMjQWdlbnRERkZpbGVBdHRhY2htZW50IiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkZyb250ZW5kTW9kdWxlUmVnaXN0cmF0aW9uIGZvciBHZW5lcmF0ZVByb3RvY29sIG1vZHVsZS48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5EeW5hbWljRmllZEZpbGU8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Gcm9udGVuZDo6QWdlbnQ6Ok1vZHVsZVJlZ2lzdHJhdGlvbjwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxGcm9udGVuZE1vZHVsZVJlZz4KICAgICAgICAgICAgICAgIDxUaXRsZT5BZ2VudERGRmlsZUF0dGFjaG1lbnQ8L1RpdGxlPgogICAgICAgICAgICAgICAgPERlc2NyaXB0aW9uPkFnZW50REZGaWxlQXR0YWNobWVudDwvRGVzY3JpcHRpb24+CiAgICAgICAgICAgICAgICA8TmF2QmFyTmFtZT5BZ2VudERGRmlsZUF0dGFjaG1lbnQ8L05hdkJhck5hbWU+CiAgICAgICAgICAgICAgICA8TmF2QmFyPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9OYXZCYXI+CiAgICAgICAgICAgIDwvRnJvbnRlbmRNb2R1bGVSZWc+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgogICAgCiAgICA8Q29uZmlnSXRlbSBOYW1lPSJEeW5hbWljRmllbGRzOjpEcml2ZXIjIyNGaWxlIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPkR5bmFtaWNGaWVsZCBiYWNrZW5kIHJlZ2lzdHJhdGlvbi48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5EeW5hbWljRmllbGRzPC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+RHluYW1pY0ZpZWxkczo6RHJpdmVyOjpSZWdpc3RyYXRpb248L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iRGlzcGxheU5hbWUiIFRyYW5zbGF0YWJsZT0iMSI+RmlsZTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTW9kdWxlIj5LZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpEcml2ZXI6OkZpbGU8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkNvbmZpZ0RpYWxvZyI+QWRtaW5EeW5hbWljRmllbGRGaWxlPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJEZWxldGVGaWxlREIiPjA8L0l0ZW0+CiAgICAgICAgICAgIDwvSGFzaD4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CiAgICAKICAgIDxDb25maWdJdGVtIE5hbWU9IkZyb250ZW5kOjpNb2R1bGUjIyNBZG1pbkR5bmFtaWNGaWVsZEZpbGUiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+QWRtaW5EeW5hbWljRmllbGRGaWxlPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+RHluYW1pY0ZpZWRGaWxlPC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+RnJvbnRlbmQ6OkFnZW50OjpNb2R1bGVSZWdpc3RyYXRpb248L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8RnJvbnRlbmRNb2R1bGVSZWc+CiAgICAgICAgICAgICAgICA8R3JvdXA+YWRtaW48L0dyb3VwPgogICAgICAgICAgICAgICAgPERlc2NyaXB0aW9uPkFkbWluPC9EZXNjcmlwdGlvbj4KICAgICAgICAgICAgICAgIDxUaXRsZSBUcmFuc2xhdGFibGU9IjEiPkR5bmFtaWMgRmllbGRzIFRleHQgQmFja2VuZCBHVUk8L1RpdGxlPgogICAgICAgICAgICAgICAgPExvYWRlcj4KICAgICAgICAgICAgICAgICAgICA8SmF2YVNjcmlwdD5Db3JlLkFnZW50LkFkbWluLkR5bmFtaWNGaWVsZC5qczwvSmF2YVNjcmlwdD4KICAgICAgICAgICAgICAgIDwvTG9hZGVyPgogICAgICAgICAgICA8L0Zyb250ZW5kTW9kdWxlUmVnPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KCjwvb3Ryc19jb25maWc+CiAgICAgICAgCg==</File>
        <File Location="Kernel/System/DynamicFieldFileValue.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/DynamicField/Driver/File.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vRHluYW1pY0ZpZWxkL0RyaXZlci9GaWxlLnBtCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6RHJpdmVyOjpGaWxlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KDphbGwpOwp1c2UgS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZEZpbGVWYWx1ZTsKdXNlIEtlcm5lbDo6U3lzdGVtOjpXZWI6OlVwbG9hZENhY2hlOwoKdXNlIGJhc2UgcXcoS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6RHJpdmVyOjpCYXNlRmlsZSk7CgpvdXIgQE9iamVjdERlcGVuZGVuY2llcyA9ICgKICAgICdLZXJuZWw6OkNvbmZpZycsCiAgICAnS2VybmVsOjpTeXN0ZW06OkRCJywKICAgICdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkVmFsdWUnLAogICAgJ0tlcm5lbDo6U3lzdGVtOjpNYWluJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKICAgICdLZXJuZWw6OlN5c3RlbTo6VGltZScsCiAgICAnS2VybmVsOjpTeXN0ZW06OldlYjo6VXBsb2FkQ2FjaGUnLAopOwoKPWhlYWQxIE5BTUUKCktlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkRyaXZlcjo6RmlsZQoKPWhlYWQxIFNZTk9QU0lTCgpEeW5hbWljRmllbGRzIEZpbGUgRHJpdmVyIGRlbGVnYXRlCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKVGhpcyBtb2R1bGUgaW1wbGVtZW50cyB0aGUgcHVibGljIGludGVyZmFjZSBvZiBMPEtlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkJhY2tlbmQ+LgpQbGVhc2UgbG9vayB0aGVyZSBmb3IgYSBkZXRhaWxlZCByZWZlcmVuY2Ugb2YgdGhlIGZ1bmN0aW9ucy4KCj1vdmVyIDQKCj1pdGVtIG5ldygpCgp1c3VhbGx5LCB5b3Ugd2FudCB0byBjcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhpcwpieSB1c2luZyBLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpCYWNrZW5kLT5uZXcoKTsKCj1jdXQKCnN1YiBuZXcgewogICAgbXkgKCAkVHlwZSwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGFsbG9jYXRlIG5ldyBoYXNoIGZvciBvYmplY3QKICAgIG15ICRTZWxmID0ge307CiAgICBibGVzcyggJFNlbGYsICRUeXBlICk7CgogICAgIyBjcmVhdGUgYWRkaXRpb25hbCBvYmplY3RzCgkkU2VsZi0+e0ZpbGVDb250ZW50fSA9ICIiOwoJJFNlbGYtPntGb3JtSUR9ID0gIiI7CiAgICAjIHNldCBmaWVsZCBiZWhhdmlvcnMKICAgICRTZWxmLT57QmVoYXZpb3JzfSA9IHsKICAgICAgICAnSXNBQ0xSZWR1Y2libGUnICAgICAgICAgICAgICAgPT4gMCwKICAgICAgICAnSXNOb3RpZmljYXRpb25FdmVudENvbmRpdGlvbicgPT4gMSwKICAgICAgICAnSXNTb3J0YWJsZScgICAgICAgICAgICAgICAgICAgPT4gMSwKICAgICAgICAnSXNGaWx0cmFibGUnICAgICAgICAgICAgICAgICAgPT4gMCwKICAgICAgICAnSXNTdGF0c0NvbmRpdGlvbicgICAgICAgICAgICAgPT4gMSwKICAgICAgICAnSXNDdXN0b21lckludGVyZmFjZUNhcGFibGUnICAgPT4gMSwKICAgIH07CgogICAgIyBnZXQgdGhlIER5bmFtaWMgRmllbGQgQmFja2VuZCBjdXN0bW9tIGV4dGVuc2lvbnMKICAgIG15ICREeW5hbWljRmllbGREcml2ZXJFeHRlbnNpb25zCiAgICAgICAgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OkNvbmZpZycpLT5HZXQoJ0R5bmFtaWNGaWVsZHM6OkV4dGVuc2lvbjo6RHJpdmVyOjpGaWxlJyk7CgogICAgRVhURU5TSU9OOgogICAgZm9yIG15ICRFeHRlbnNpb25LZXkgKCBzb3J0IGtleXMgJXskRHluYW1pY0ZpZWxkRHJpdmVyRXh0ZW5zaW9uc30gKSB7CgogICAgICAgICMgc2tpcCBpbnZhbGlkIGV4dGVuc2lvbnMKICAgICAgICBuZXh0IEVYVEVOU0lPTiBpZiAhSXNIYXNoUmVmV2l0aERhdGEoICREeW5hbWljRmllbGREcml2ZXJFeHRlbnNpb25zLT57JEV4dGVuc2lvbktleX0gKTsKCiAgICAgICAgIyBjcmVhdGUgYSBleHRlbnNpb24gY29uZmlnIHNob3J0Y3V0CiAgICAgICAgbXkgJEV4dGVuc2lvbiA9ICREeW5hbWljRmllbGREcml2ZXJFeHRlbnNpb25zLT57JEV4dGVuc2lvbktleX07CgogICAgICAgICMgY2hlY2sgaWYgZXh0ZW5zaW9uIGhhcyBhIG5ldyBtb2R1bGUKICAgICAgICBpZiAoICRFeHRlbnNpb24tPntNb2R1bGV9ICkgewoKICAgICAgICAgICAgIyBjaGVjayBpZiBtb2R1bGUgY2FuIGJlIGxvYWRlZAogICAgICAgICAgICBpZiAoICEkU2VsZi0+e01haW5PYmplY3R9LT5SZXF1aXJlQmFzZUNsYXNzKCAkRXh0ZW5zaW9uLT57TW9kdWxlfSApICkgewogICAgICAgICAgICAgICAgZGllICJDYW4ndCBsb2FkIGR5bmFtaWMgZmllbGRzIGJhY2tlbmQgbW9kdWxlIgogICAgICAgICAgICAgICAgICAgIC4gIiAkRXh0ZW5zaW9uLT57TW9kdWxlfSEgJEAiOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjIGNoZWNrIGlmIGV4dGVuc2lvbiBjb250YWlucyBtb3JlIGJlaGFiaW9ycwogICAgICAgIGlmICggSXNIYXNoUmVmV2l0aERhdGEoICRFeHRlbnNpb24tPntCZWhhdmlvcnN9ICkgKSB7CgogICAgICAgICAgICAleyAkU2VsZi0+e0JlaGF2aW9yc30gfSA9ICgKICAgICAgICAgICAgICAgICV7ICRTZWxmLT57QmVoYXZpb3JzfSB9LAogICAgICAgICAgICAgICAgJXsgJEV4dGVuc2lvbi0+e0JlaGF2aW9yc30gfQogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KCQogICAgcmV0dXJuICRTZWxmOwp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
        <File Location="Kernel/System/DynamicField/Driver/BaseFile.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vRHluYW1pY0ZpZWxkL0RyaXZlci9CYXNlRmlsZS5wbSAtIER5bmFtaWMgZmllbGQgRHJpdmVyIGZ1bmN0aW9ucwojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkRyaXZlcjo6QmFzZUZpbGU7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7Cgp1c2UgS2VybmVsOjpTeXN0ZW06OlZhcmlhYmxlQ2hlY2sgcXcoOmFsbCk7Cgp1c2UgYmFzZSBxdyhLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpEcml2ZXI6OkJhc2VUb0ZpbGUpOwp1c2UgRGF0YTo6RHVtcGVyOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpTeXN0ZW06OkRCJywKICAgICdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkRmlsZVZhbHVlJywKICAgICdLZXJuZWw6OlN5c3RlbTo6TG9nJywKKTsKCj1oZWFkMSBOQU1FCgpLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpEcml2ZXI6OkJhc2VGaWxlIC0gc3ViIG1vZHVsZSBvZgpLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkOjpEcml2ZXI6OlRleHQgYW5kIEtlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkRyaXZlcjo6VGV4dEFyZWEKCj1oZWFkMSBTWU5PUFNJUwoKVGV4dCBjb21tb24gZnVuY3Rpb25zLgoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCnN1YiBWYWx1ZUdldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRERlZhbHVlID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZEZpbGVWYWx1ZScpLT5WYWx1ZUdldCgKICAgICAgICBGaWVsZElEICA9PiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e0lEfSwKICAgICAgICBPYmplY3RJRCA9PiAkUGFyYW17T2JqZWN0SUR9LAogICAgKTsKCiAgICByZXR1cm4gaWYgISRERlZhbHVlOwogICAgcmV0dXJuIGlmICFJc0FycmF5UmVmV2l0aERhdGEoJERGVmFsdWUpOwogICAgcmV0dXJuIGlmICFJc0hhc2hSZWZXaXRoRGF0YSggJERGVmFsdWUtPlswXSApOwoJbXkgJEFsbEZpbGVzID0gJyc7Cglmb3JlYWNoKEB7JERGVmFsdWV9KXsKCQkkQWxsRmlsZXMuPSRfLT57VmFsdWVUZXh0fTsKCX0KICAgIHJldHVybiAkQWxsRmlsZXM7Cn0KCgoKc3ViIFZhbHVlU2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgkKICAgIG15ICRTdWNjZXNzID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZEZpbGVWYWx1ZScpLT5WYWx1ZVNldCgKICAgICAgICBQbGlrICA9PiAkU2VsZi0+e0ZpbGVDb250ZW50fSwKICAgICAgICBPYmplY3RJRCA9PiAkUGFyYW17T2JqZWN0SUR9LAogICAgICAgIEZpZWxkSUQgID0+ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57SUR9LAogICAgICAgIEZvcm1JRCA9PiAkU2VsZi0+e0Zvcm1JRH0sCiAgICApOwogICAgCiAgICByZXR1cm4gJFN1Y2Nlc3M7Cn0KCnN1YiBWYWx1ZVZhbGlkYXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFN1Y2Nlc3MgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkRmlsZVZhbHVlJyktPlZhbHVlVmFsaWRhdGUoCiAgICAgICAgVmFsdWUgPT4gewogICAgICAgICAgICBWYWx1ZVRleHQgPT4gJFBhcmFte1ZhbHVlfSwKICAgICAgICB9LAogICAgICAgIFVzZXJJRCA9PiAkUGFyYW17VXNlcklEfQogICAgKTsKCiAgICByZXR1cm4gJFN1Y2Nlc3M7Cn0KCnN1YiBTZWFyY2hTUUxHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAlT3BlcmF0b3JzID0gKAogICAgICAgIEVxdWFscyAgICAgICAgICAgID0+ICc9JywKICAgICAgICBHcmVhdGVyVGhhbiAgICAgICA9PiAnPicsCiAgICAgICAgR3JlYXRlclRoYW5FcXVhbHMgPT4gJz49JywKICAgICAgICBTbWFsbGVyVGhhbiAgICAgICA9PiAnPCcsCiAgICAgICAgU21hbGxlclRoYW5FcXVhbHMgPT4gJzw9JywKICAgICk7CgogICAgIyBnZXQgZGF0YWJhc2Ugb2JqZWN0CiAgICBteSAkREJPYmplY3QgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6REInKTsKCiAgICBpZiAoICRPcGVyYXRvcnN7ICRQYXJhbXtPcGVyYXRvcn0gfSApIHsKICAgICAgICBteSAkU1FMID0gIiAkUGFyYW17VGFibGVBbGlhc30udmFsdWVfdGV4dCAkT3BlcmF0b3JzeyRQYXJhbXtPcGVyYXRvcn19ICciOwogICAgICAgICRTUUwgLj0gJERCT2JqZWN0LT5RdW90ZSggJFBhcmFte1NlYXJjaFRlcm19ICkgLiAiJyAiOwogICAgICAgIHJldHVybiAkU1FMOwogICAgfQoKICAgIGlmICggJFBhcmFte09wZXJhdG9yfSBlcSAnTGlrZScgKSB7CgogICAgICAgIG15ICRTUUwgPSAkREJPYmplY3QtPlF1ZXJ5Q29uZGl0aW9uKAogICAgICAgICAgICBLZXkgICA9PiAiJFBhcmFte1RhYmxlQWxpYXN9LnZhbHVlX3RleHQiLAogICAgICAgICAgICBWYWx1ZSA9PiAkUGFyYW17U2VhcmNoVGVybX0sCiAgICAgICAgKTsKCiAgICAgICAgcmV0dXJuICRTUUw7CiAgICB9CgogICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgJ1ByaW9yaXR5JyA9PiAnZXJyb3InLAogICAgICAgICdNZXNzYWdlJyAgPT4gIlVuc3VwcG9ydGVkIE9wZXJhdG9yICRQYXJhbXtPcGVyYXRvcn0iLAogICAgKTsKCiAgICByZXR1cm47Cn0KCnN1YiBTZWFyY2hTUUxPcmRlckZpZWxkR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgcmV0dXJuICIkUGFyYW17VGFibGVBbGlhc30udmFsdWVfdGV4dCI7Cn0KCnN1YiBFZGl0RmllbGRSZW5kZXIgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIHRha2UgY29uZmlnIGZyb20gZmllbGQgY29uZmlnCiAgICBteSAkRmllbGRDb25maWcgPSAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e0NvbmZpZ307CiAgICBteSAkRmllbGROYW1lICAgPSAnRHluYW1pY0ZpZWxkXycgLiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e05hbWV9OwogICAgbXkgJEZpZWxkTGFiZWwgID0gJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30tPntMYWJlbH07CgogICAgbXkgJFZhbHVlID0gJyc7CgogICAgIyBzZXQgdGhlIGZpZWxkIHZhbHVlIG9yIGRlZmF1bHQKICAgIGlmICggJFBhcmFte1VzZURlZmF1bHRWYWx1ZX0gKSB7CiAgICAgICAgJFZhbHVlID0gKCBkZWZpbmVkICRGaWVsZENvbmZpZy0+e0RlZmF1bHRWYWx1ZX0gPyAkRmllbGRDb25maWctPntEZWZhdWx0VmFsdWV9IDogJycgKTsKICAgIH0KICAgICRWYWx1ZSA9ICRQYXJhbXtWYWx1ZX0gLy8gJFZhbHVlOwoKICAgICMgZXh0cmFjdCB0aGUgZHluYW1pYyBmaWVsZCB2YWx1ZSBmb3JtIHRoZSB3ZWIgcmVxdWVzdAogICAgbXkgJEZpZWxkVmFsdWUgPSAkU2VsZi0+RWRpdEZpZWxkVmFsdWVHZXQoCiAgICAgICAgJVBhcmFtLAogICAgKTsKCiAgICAjIHNldCB2YWx1ZXMgZnJvbSBQYXJhbU9iamVjdCBpZiBwcmVzZW50CiAgICBpZiAoIGRlZmluZWQgJEZpZWxkVmFsdWUgKSB7CiAgICAgICAgJFZhbHVlID0gJEZpZWxkVmFsdWU7CiAgICB9CgogICAgIyBjaGVjayBhbmQgc2V0IGNsYXNzIGlmIG5lY2Vzc2FyeQogICAgbXkgJEZpZWxkQ2xhc3MgPSAnRHluYW1pY0ZpZWxkRmlsZSBXNTBwYyc7CiAgICBpZiAoIGRlZmluZWQgJFBhcmFte0NsYXNzfSAmJiAkUGFyYW17Q2xhc3N9IG5lICcnICkgewogICAgICAgICRGaWVsZENsYXNzIC49ICcgJyAuICRQYXJhbXtDbGFzc307CiAgICB9CgogICAgIyBzZXQgZmllbGQgYXMgbWFuZGF0b3J5CiAgICBpZiAoICRQYXJhbXtNYW5kYXRvcnl9ICkgewogICAgICAgICRGaWVsZENsYXNzIC49ICcgVmFsaWRhdGVfUmVxdWlyZWQnOwogICAgfQoKICAgICMgc2V0IGVycm9yIGNzcyBjbGFzcwogICAgaWYgKCAkUGFyYW17U2VydmVyRXJyb3J9ICkgewogICAgICAgICRGaWVsZENsYXNzIC49ICcgU2VydmVyRXJyb3InOwogICAgfQoKICAgIG15ICRWYWx1ZUVzY2FwZWQ7CgogICAgbXkgJEZpZWxkTGFiZWxFc2NhcGVkID0gJFBhcmFte0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCiAgICAgICAgVGV4dCA9PiAkRmllbGRMYWJlbCwKICAgICk7CgogICAgbXkgJEhUTUxTdHJpbmcgPSA8PCJFT0YiOwo8aW5wdXQgdHlwZT0iZmlsZSIgY2xhc3M9IiRGaWVsZENsYXNzIiBpZD0iJEZpZWxkTmFtZSIgbmFtZT0iJEZpZWxkTmFtZSIgdGl0bGU9IiRGaWVsZExhYmVsRXNjYXBlZCIgc2l6ZT0nNDAnLz48YnIvPgokVmFsdWUKRU9GCgojYXV0b3N1Ym1pdAojIDwhLS1kdGw6anNfb25fZG9jdW1lbnRfY29tcGxldGUtLT4KIyA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAjIFwkKCcjJEZpZWxkTmFtZScpLmJpbmQoJ2NoYW5nZScsIGZ1bmN0aW9uIChFdmVudCkgewogICAgICAgICMgdmFyIFwkRm9ybSA9IFwkKCcjJEZpZWxkTmFtZScpLmNsb3Nlc3QoJ2Zvcm0nKTsKICAgICAgICAjIENvcmUuRm9ybS5WYWxpZGF0ZS5EaXNhYmxlVmFsaWRhdGlvbihcJEZvcm0pOwogICAgICAgICMgXCRGb3JtLnN1Ym1pdCgpOwoKICAgICMgfSk7CiMgPC9zY3JpcHQ+CiMgPCEtLWR0bDpqc19vbl9kb2N1bWVudF9jb21wbGV0ZS0tPgoKICAgIGlmICggJFBhcmFte01hbmRhdG9yeX0gKSB7CiAgICAgICAgbXkgJERpdklEID0gJEZpZWxkTmFtZSAuICdFcnJvcic7CgogICAgICAgIG15ICRGaWVsZFJlcXVpcmVkTWVzc2FnZSA9ICRQYXJhbXtMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5UcmFuc2xhdGUoIlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuIik7CgogICAgICAgICMgZm9yIGNsaWVudCBzaWRlIHZhbGlkYXRpb24KICAgICAgICAkSFRNTFN0cmluZyAuPSA8PCJFT0YiOwo8ZGl2IGlkPSIkRGl2SUQiIGNsYXNzPSJUb29sdGlwRXJyb3JNZXNzYWdlIj4KICAgIDxwPgogICAgICAgICRGaWVsZFJlcXVpcmVkTWVzc2FnZQogICAgPC9wPgo8L2Rpdj4KRU9GCiAgICB9CgogICAgaWYgKCAkUGFyYW17U2VydmVyRXJyb3J9ICkgewoKICAgICAgICBteSAkRXJyb3JNZXNzYWdlID0gJFBhcmFte0Vycm9yTWVzc2FnZX0gfHwgJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQuJzsKICAgICAgICAkRXJyb3JNZXNzYWdlID0gJFBhcmFte0xheW91dE9iamVjdH0tPntMYW5ndWFnZU9iamVjdH0tPlRyYW5zbGF0ZSgkRXJyb3JNZXNzYWdlKTsKICAgICAgICBteSAkRGl2SUQgPSAkRmllbGROYW1lIC4gJ1NlcnZlckVycm9yJzsKCiAgICAgICAgIyBmb3Igc2VydmVyIHNpZGUgdmFsaWRhdGlvbgogICAgICAgICRIVE1MU3RyaW5nIC49IDw8IkVPRiI7CjxkaXYgaWQ9IiREaXZJRCIgY2xhc3M9IlRvb2x0aXBFcnJvck1lc3NhZ2UiPgogICAgPHA+CiAgICAgICAgJEVycm9yTWVzc2FnZQogICAgPC9wPgo8L2Rpdj4KRU9GCiAgICB9CgogICAgIyBjYWxsIEVkaXRMYWJlbFJlbmRlciBvbiB0aGUgY29tbW9uIERyaXZlcgogICAgbXkgJExhYmVsU3RyaW5nID0gJFNlbGYtPkVkaXRMYWJlbFJlbmRlcigKICAgICAgICAlUGFyYW0sCiAgICAgICAgTWFuZGF0b3J5ID0+ICRQYXJhbXtNYW5kYXRvcnl9IHx8ICcwJywKICAgICAgICBGaWVsZE5hbWUgPT4gJEZpZWxkTmFtZSwKICAgICk7CgogICAgbXkgJERhdGEgPSB7CiAgICAgICAgRmllbGQgPT4gJEhUTUxTdHJpbmcsCiAgICAgICAgTGFiZWwgPT4gJExhYmVsU3RyaW5nLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIEVkaXRGaWVsZFZhbHVlR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJEZpZWxkTmFtZSA9ICdEeW5hbWljRmllbGRfJyAuICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57TmFtZX07CgogICAgbXkgJFZhbHVlOwogICAgbXkgJEZvcm1JRDsKCiAgICAjIGNoZWNrIGlmIHRoZXJlIGlzIGEgVGVtcGxhdGUgYW5kIHJldHJpZXZlIHRoZSBkeW5hbWljIGZpZWxkIHZhbHVlIGZyb20gdGhlcmUKICAgIGlmICggSXNIYXNoUmVmV2l0aERhdGEoICRQYXJhbXtUZW1wbGF0ZX0gKSApIHsKICAgICAgICAkVmFsdWUgPSAkUGFyYW17VGVtcGxhdGV9LT57JEZpZWxkTmFtZX07CiAgICB9CgogICAgIyBvdGhlcndpc2UgZ2V0IGR5bmFtaWMgZmllbGQgdmFsdWUgZnJvbSB0aGUgd2ViIHJlcXVlc3QKICAgIGVsc2lmICgKICAgICAgICBkZWZpbmVkICRQYXJhbXtQYXJhbU9iamVjdH0KICAgICAgICAmJiByZWYgJFBhcmFte1BhcmFtT2JqZWN0fSBlcSAnS2VybmVsOjpTeXN0ZW06OldlYjo6UmVxdWVzdCcKICAgICAgICApCiAgICB7CgkJJFNlbGYtPntGb3JtSUR9ID0gJEZvcm1JRCA9ICAkUGFyYW17UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJ0Zvcm1JRCcgKTsKICAgICAgICAkVmFsdWUgPSAkUGFyYW17UGFyYW1PYmplY3R9LT5HZXRQYXJhbSggUGFyYW0gPT4gJEZpZWxkTmFtZSApOwoJCWlmKCRQYXJhbXtQYXJhbU9iamVjdH0tPkdldFBhcmFtKCBQYXJhbSA9PiAkRmllbGROYW1lICkpewoJCQlteSAlVmFsdWUgPSAkUGFyYW17UGFyYW1PYmplY3R9LT5HZXRVcGxvYWRBbGwoCgkJCQlQYXJhbSA9PiAkRmllbGROYW1lLAoJCQkpOwoJCQkKCQkJaWYgKCAkVmFsdWV7RmlsZW5hbWV9ICl7CgkJCQkkU2VsZi0+e0ZpbGVDb250ZW50fSA9IFwlVmFsdWU7CgkJCX0KCQkJcmV0dXJuIHsKICAgICAgICAgICAgCSRGaWVsZE5hbWUgPT4gXCVWYWx1ZSwKCiAgICAgICAgCX07CgkJfQogICAgfQoKICAgIGlmICggZGVmaW5lZCAkUGFyYW17UmV0dXJuVGVtcGxhdGVTdHJ1Y3R1cmV9ICYmICRQYXJhbXtSZXR1cm5UZW1wbGF0ZVN0cnVjdHVyZX0gZXEgJzEnICkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICRGaWVsZE5hbWUgPT4gJFZhbHVlLAogICAgICAgIH07CiAgICB9CgogICAgIyBmb3IgdGhpcyBmaWVsZCB0aGUgbm9ybWFsIHJldHVybiBhbiB0aGUgUmV0dXJuVmFsdWVTdHJ1Y3R1cmUgYXJlIHRoZSBzYW1lCiAgICByZXR1cm4gJFZhbHVlOwp9CgpzdWIgRWRpdEZpZWxkVmFsdWVWYWxpZGF0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IHRoZSBmaWVsZCB2YWx1ZSBmcm9tIHRoZSBodHRwIHJlcXVlc3QKICAgIG15ICRWYWx1ZSA9ICRTZWxmLT5FZGl0RmllbGRWYWx1ZUdldCgKICAgICAgICBEeW5hbWljRmllbGRDb25maWcgPT4gJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30sCiAgICAgICAgUGFyYW1PYmplY3QgICAgICAgID0+ICRQYXJhbXtQYXJhbU9iamVjdH0sCgogICAgICAgICMgbm90IG5lY2Vzc2FyeSBmb3IgdGhpcyBEcml2ZXIgYnV0IHBsYWNlIGl0IGZvciBjb25zaXN0ZW5jeSByZWFzb25zCiAgICAgICAgUmV0dXJuVmFsdWVTdHJ1Y3R1cmUgPT4gMSwKICAgICk7CgogICAgbXkgJFNlcnZlckVycm9yOwogICAgbXkgJEVycm9yTWVzc2FnZTsKCiAgICAjIHBlcmZvcm0gbmVjZXNzYXJ5IHZhbGlkYXRpb25zCiAgICBpZiAoICRQYXJhbXtNYW5kYXRvcnl9ICYmICRWYWx1ZSBlcSAnJyApIHsKICAgICAgICAkU2VydmVyRXJyb3IgPSAxOwogICAgfQoKICAgICMgY3JlYXRlIHJlc3VsdGluZyBzdHJ1Y3R1cmUKICAgIG15ICRSZXN1bHQgPSB7CiAgICAgICAgU2VydmVyRXJyb3IgID0+ICRTZXJ2ZXJFcnJvciwKICAgICAgICBFcnJvck1lc3NhZ2UgPT4gJEVycm9yTWVzc2FnZSwKICAgIH07CgogICAgcmV0dXJuICRSZXN1bHQ7Cn0KCnN1YiBEaXNwbGF5VmFsdWVSZW5kZXIgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIHNldCBIVE1MT3VwdXQgYXMgZGVmYXVsdCBpZiBub3Qgc3BlY2lmaWVkCiAgICBpZiAoICFkZWZpbmVkICRQYXJhbXtIVE1MT3V0cHV0fSApIHsKICAgICAgICAkUGFyYW17SFRNTE91dHB1dH0gPSAxOwogICAgfQoKICAgICMgZ2V0IHJhdyBUaXRsZSBhbmQgVmFsdWUgc3RyaW5ncyBmcm9tIGZpZWxkIHZhbHVlCiAgICBteSAkVmFsdWUgPSBkZWZpbmVkICRQYXJhbXtWYWx1ZX0gPyAkUGFyYW17VmFsdWV9IDogJyc7CiAgICBteSAkVGl0bGUgPSAkVmFsdWU7CgkKICAgICMgSFRNTE91cHV0IHRyYW5zZm9ybWF0aW9ucwogICAgaWYgKCAkUGFyYW17SFRNTE91dHB1dH0gKSB7CiAgICAgICAgIyAkVmFsdWUgPSAkUGFyYW17TGF5b3V0T2JqZWN0fS0+QXNjaWkySHRtbCgKICAgICAgICAgICAgIyBUZXh0ID0+ICRWYWx1ZSwKICAgICAgICAgICAgIyBNYXggID0+ICRQYXJhbXtWYWx1ZU1heENoYXJzfSB8fCAnJywKICAgICAgICAjICk7CgkJCQkjIG9wZ2sgZGIKCQogICAgICAgICMgJFRpdGxlID0gJFBhcmFte0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCiAgICAgICAgICAgICMgVGV4dCA9PiAkVGl0bGUsCiAgICAgICAgICAgICMgTWF4ICA9PiAkUGFyYW17VGl0bGVNYXhDaGFyc30gfHwgJycsCiAgICAgICAgIyApOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgaWYgKCAkUGFyYW17VmFsdWVNYXhDaGFyc30gJiYgbGVuZ3RoKCRWYWx1ZSkgPiAkUGFyYW17VmFsdWVNYXhDaGFyc30gKSB7CiAgICAgICAgICAgICMgJFZhbHVlID0gc3Vic3RyKCAkVmFsdWUsIDAsICRQYXJhbXtWYWx1ZU1heENoYXJzfSApIC4gJy4uLic7CiAgICAgICAgfQogICAgICAgIGlmICggJFBhcmFte1RpdGxlTWF4Q2hhcnN9ICYmIGxlbmd0aCgkVGl0bGUpID4gJFBhcmFte1RpdGxlTWF4Q2hhcnN9ICkgewogICAgICAgICAgICAjICRUaXRsZSA9IHN1YnN0ciggJFRpdGxlLCAwLCAkUGFyYW17VGl0bGVNYXhDaGFyc30gKSAuICcuLi4nOwogICAgICAgIH0KICAgIH0KCiAgICAjIHNldCBmaWVsZCBsaW5rIGZvcm0gY29uZmlnCiAgICBteSAkTGluayA9ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57Q29uZmlnfS0+e0xpbmt9IHx8ICcnOwoJCiAgICAjIGNyZWF0ZSByZXR1cm4gc3RydWN0dXJlCiAgICBteSAkRGF0YSA9IHsKICAgICAgICBWYWx1ZSA9PiAkVmFsdWUsCiAgICAgICAgVGl0bGUgPT4gJ1BvYmllcnonLAogICAgICAgIExpbmsgID0+ICRMaW5rLAogICAgfTsKCiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBTZWFyY2hGaWVsZFJlbmRlciB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgdGFrZSBjb25maWcgZnJvbSBmaWVsZCBjb25maWcKICAgIG15ICRGaWVsZENvbmZpZyA9ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57Q29uZmlnfTsKICAgIG15ICRGaWVsZE5hbWUgICA9ICdTZWFyY2hfRHluYW1pY0ZpZWxkXycgLiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e05hbWV9OwogICAgbXkgJEZpZWxkTGFiZWwgID0gJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30tPntMYWJlbH07CgogICAgIyBzZXQgdGhlIGZpZWxkIHZhbHVlCiAgICBteSAkVmFsdWUgPSAoIGRlZmluZWQgJFBhcmFte0RlZmF1bHRWYWx1ZX0gPyAkUGFyYW17RGVmYXVsdFZhbHVlfSA6ICcnICk7CgogICAgIyBnZXQgdGhlIGZpZWxkIHZhbHVlLCB0aGlzIGZ1bmN0aW9uIGlzIGFsd2F5cyBjYWxsZWQgYWZ0ZXIgdGhlIHByb2ZpbGUgaXMgbG9hZGVkCiAgICBteSAkRmllbGRWYWx1ZSA9ICRTZWxmLT5TZWFyY2hGaWVsZFZhbHVlR2V0KCVQYXJhbSk7CgogICAgIyBzZXQgdmFsdWVzIGZyb20gcHJvZmlsZSBpZiBwcmVzZW50CiAgICBpZiAoIGRlZmluZWQgJEZpZWxkVmFsdWUgKSB7CiAgICAgICAgJFZhbHVlID0gJEZpZWxkVmFsdWU7CiAgICB9CgogICAgIyBjaGVjayBpZiB2YWx1ZSBpcyBhbiBhcnJheXJlZiAoR2VuZXJpY0FnZW50IEpvYnMgYW5kIE5vdGlmaWNhdGlvbkV2ZW50cykKICAgIGlmICggSXNBcnJheVJlZldpdGhEYXRhKCRWYWx1ZSkgKSB7CiAgICAgICAgJFZhbHVlID0gQHskVmFsdWV9WzBdOwogICAgfQoKICAgICMgY2hlY2sgYW5kIHNldCBjbGFzcyBpZiBuZWNlc3NhcnkKICAgIG15ICRGaWVsZENsYXNzID0gJ0R5bmFtaWNGaWVsZFRleHQnOwoKICAgIG15ICRWYWx1ZUVzY2FwZWQgPSAkUGFyYW17TGF5b3V0T2JqZWN0fS0+QXNjaWkySHRtbCgKICAgICAgICBUZXh0ID0+ICRWYWx1ZSwKICAgICk7CgogICAgbXkgJEZpZWxkTGFiZWxFc2NhcGVkID0gJFBhcmFte0xheW91dE9iamVjdH0tPkFzY2lpMkh0bWwoCiAgICAgICAgVGV4dCA9PiAkRmllbGRMYWJlbCwKICAgICk7CgogICAgbXkgJEhUTUxTdHJpbmcgPSA8PCJFT0YiOwo8aW5wdXQgdHlwZT0iZmlsZSIgY2xhc3M9IiRGaWVsZENsYXNzIiBpZD0iJEZpZWxkTmFtZSIgbmFtZT0iJEZpZWxkTmFtZSIgdGl0bGU9IiRGaWVsZExhYmVsRXNjYXBlZCIgdmFsdWU9IiRWYWx1ZUVzY2FwZWQiIC8+CkVPRgoKICAgIG15ICRBZGRpdGlvbmFsVGV4dDsKICAgIGlmICggJFBhcmFte1VzZUxhYmVsSGludHN9ICkgewogICAgICAgICRBZGRpdGlvbmFsVGV4dCA9ICdlLmcuIFRleHQgb3IgVGUqdCc7CiAgICB9CgogICAgIyBjYWxsIEVkaXRMYWJlbFJlbmRlciBvbiB0aGUgY29tbW9uIERyaXZlcgogICAgbXkgJExhYmVsU3RyaW5nID0gJFNlbGYtPkVkaXRMYWJlbFJlbmRlcigKICAgICAgICAlUGFyYW0sCiAgICAgICAgRmllbGROYW1lICAgICAgPT4gJEZpZWxkTmFtZSwKICAgICAgICBBZGRpdGlvbmFsVGV4dCA9PiAkQWRkaXRpb25hbFRleHQsCiAgICApOwoKICAgIG15ICREYXRhID0gewogICAgICAgIEZpZWxkID0+ICRIVE1MU3RyaW5nLAogICAgICAgIExhYmVsID0+ICRMYWJlbFN0cmluZywKICAgIH07CgkKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIFNlYXJjaEZpZWxkVmFsdWVHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkVmFsdWU7CgogICAgIyBnZXQgZHluYW1pYyBmaWVsZCB2YWx1ZSBmcm9tIHBhcmFtIG9iamVjdAogICAgaWYgKCBkZWZpbmVkICRQYXJhbXtQYXJhbU9iamVjdH0gKSB7CiAgICAgICAgJFZhbHVlID0gJFBhcmFte1BhcmFtT2JqZWN0fS0+R2V0UGFyYW0oCiAgICAgICAgICAgIFBhcmFtID0+ICdTZWFyY2hfRHluYW1pY0ZpZWxkXycgLiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e05hbWV9CiAgICAgICAgKTsKICAgIH0KCiAgICAjIG90aGVyd2lzZSBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHByb2ZpbGUKICAgIGVsc2lmICggZGVmaW5lZCAkUGFyYW17UHJvZmlsZX0gKSB7CiAgICAgICAgJFZhbHVlID0gJFBhcmFte1Byb2ZpbGV9LT57ICdTZWFyY2hfRHluYW1pY0ZpZWxkXycgLiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e05hbWV9IH07CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKCBkZWZpbmVkICRQYXJhbXtSZXR1cm5Qcm9maWxlU3RydWN0dXJlfSAmJiAkUGFyYW17UmV0dXJuUHJvZmlsZVN0cnVjdHVyZX0gZXEgMSApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAnU2VhcmNoX0R5bmFtaWNGaWVsZF8nIC4gJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30tPntOYW1lfSA9PiAkVmFsdWUsCiAgICAgICAgfTsKICAgIH0KCiAgICByZXR1cm4gJFZhbHVlOwp9CgpzdWIgU2VhcmNoRmllbGRQYXJhbWV0ZXJCdWlsZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IGZpZWxkIHZhbHVlCiAgICBteSAkVmFsdWUgPSAkU2VsZi0+U2VhcmNoRmllbGRWYWx1ZUdldCglUGFyYW0pOwoKICAgICMgc2V0IG9wZXJhdG9yCiAgICBteSAkT3BlcmF0b3IgPSAnRXF1YWxzJzsKCiAgICAjIHNlYXJjaCBmb3IgYSB3aWxkIGNhcmQgaW4gdGhlIHZhbHVlCiAgICBpZiAoICRWYWx1ZSAmJiAkVmFsdWUgPX4gbXtcKn0gKSB7CgogICAgICAgICMgY2hhbmdlIG9wcmF0b3IKICAgICAgICAkT3BlcmF0b3IgPSAnTGlrZSc7CiAgICB9CgogICAgIyByZXR1cm4gc2VhcmNoIHBhcmFtZXRlciBzdHJ1Y3R1cmUKICAgIHJldHVybiB7CiAgICAgICAgUGFyYW1ldGVyID0+IHsKICAgICAgICAgICAgJE9wZXJhdG9yID0+ICRWYWx1ZSwKICAgICAgICB9LAogICAgICAgIERpc3BsYXkgPT4gJFZhbHVlLAogICAgfTsKfQoKc3ViIFN0YXRzRmllbGRQYXJhbWV0ZXJCdWlsZCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIHJldHVybiB7CiAgICAgICAgTmFtZSAgICA9PiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e0xhYmVsfSwKICAgICAgICBFbGVtZW50ID0+ICdEeW5hbWljRmllbGRfJyAuICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57TmFtZX0sCiAgICB9Owp9CgpzdWIgU3RhdHNTZWFyY2hGaWVsZFBhcmFtZXRlckJ1aWxkIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFZhbHVlID0gJFBhcmFte1ZhbHVlfTsKCiAgICAjIHNldCBvcGVyYXRvcgogICAgbXkgJE9wZXJhdG9yID0gJ0VxdWFscyc7CgogICAgIyBzZWFyY2ggZm9yIGEgd2lsZCBjYXJkIGluIHRoZSB2YWx1ZQogICAgaWYgKCAkVmFsdWUgJiYgJFZhbHVlID1+IG17XCp9ICkgewoKICAgICAgICAjIGNoYW5nZSBvcHJhdG9yCiAgICAgICAgJE9wZXJhdG9yID0gJ0xpa2UnOwogICAgfQoKICAgIHJldHVybiB7CiAgICAgICAgJE9wZXJhdG9yID0+ICRWYWx1ZSwKICAgIH07Cn0KCnN1YiBSZWFkYWJsZVZhbHVlUmVuZGVyIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFZhbHVlID0gZGVmaW5lZCAkUGFyYW17VmFsdWV9ID8gJFBhcmFte1ZhbHVlfSA6ICcnOwogICAgbXkgJFRpdGxlID0gJFZhbHVlOwoKICAgICMgY3V0IHN0cmluZ3MgaWYgbmVlZGVkCiAgICBpZiAoICRQYXJhbXtWYWx1ZU1heENoYXJzfSAmJiBsZW5ndGgoJFZhbHVlKSA+ICRQYXJhbXtWYWx1ZU1heENoYXJzfSApIHsKICAgICAgICAkVmFsdWUgPSBzdWJzdHIoICRWYWx1ZSwgMCwgJFBhcmFte1ZhbHVlTWF4Q2hhcnN9ICkgLiAnLi4uJzsKICAgIH0KICAgIGlmICggJFBhcmFte1RpdGxlTWF4Q2hhcnN9ICYmIGxlbmd0aCgkVGl0bGUpID4gJFBhcmFte1RpdGxlTWF4Q2hhcnN9ICkgewogICAgICAgICRUaXRsZSA9IHN1YnN0ciggJFRpdGxlLCAwLCAkUGFyYW17VGl0bGVNYXhDaGFyc30gKSAuICcuLi4nOwogICAgfQoKICAgICMgY3JlYXRlIHJldHVybiBzdHJ1Y3R1cmUKICAgIG15ICREYXRhID0gewogICAgICAgIFZhbHVlID0+ICRWYWx1ZSwKICAgICAgICBUaXRsZSA9PiAkVGl0bGUsCiAgICB9OwoKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIFRlbXBsYXRlVmFsdWVUeXBlR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJEZpZWxkTmFtZSA9ICdEeW5hbWljRmllbGRfJyAuICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57TmFtZX07CgogICAgIyBzZXQgdGhlIGZpZWxkIHR5cGVzCiAgICBteSAkRWRpdFZhbHVlVHlwZSAgID0gJ1NDQUxBUic7CiAgICBteSAkU2VhcmNoVmFsdWVUeXBlID0gJ1NDQUxBUic7CgogICAgIyByZXR1cm4gdGhlIGNvcnJlY3Qgc3RydWN0dXJlCiAgICBpZiAoICRQYXJhbXtGaWVsZFR5cGV9IGVxICdFZGl0JyApIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICAkRmllbGROYW1lID0+ICRFZGl0VmFsdWVUeXBlLAogICAgICAgICAgICB9CiAgICB9CiAgICBlbHNpZiAoICRQYXJhbXtGaWVsZFR5cGV9IGVxICdTZWFyY2gnICkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICdTZWFyY2hfJyAuICRGaWVsZE5hbWUgPT4gJFNlYXJjaFZhbHVlVHlwZSwKICAgICAgICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgJEZpZWxkTmFtZSAgICAgICAgICAgICA9PiAkRWRpdFZhbHVlVHlwZSwKICAgICAgICAgICAgJ1NlYXJjaF8nIC4gJEZpZWxkTmFtZSA9PiAkU2VhcmNoVmFsdWVUeXBlLAogICAgICAgICAgICB9CiAgICB9Cn0KCnN1YiBSYW5kb21WYWx1ZVNldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRWYWx1ZSA9IGludCggcmFuZCg1MDApICk7CgogICAgbXkgJFN1Y2Nlc3MgPSAkU2VsZi0+VmFsdWVTZXQoCiAgICAgICAgJVBhcmFtLAogICAgICAgIFZhbHVlID0+ICRWYWx1ZSwKICAgICk7CgogICAgaWYgKCAhJFN1Y2Nlc3MgKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgU3VjY2VzcyA9PiAwLAogICAgICAgIH07CiAgICB9CiAgICByZXR1cm4gewogICAgICAgIFN1Y2Nlc3MgPT4gMSwKICAgICAgICBWYWx1ZSAgID0+ICRWYWx1ZSwKICAgIH07Cn0KCnN1YiBPYmplY3RNYXRjaCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRGaWVsZE5hbWUgPSAnRHluYW1pY0ZpZWxkXycgLiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e05hbWV9OwoKICAgICMgcmV0dXJuIGZhbHNlIGlmIGZpZWxkIGlzIG5vdCBkZWZpbmVkCiAgICByZXR1cm4gMCBpZiAoICFkZWZpbmVkICRQYXJhbXtPYmplY3RBdHRyaWJ1dGVzfS0+eyRGaWVsZE5hbWV9ICk7CgogICAgIyByZXR1cm4gZmFsc2UgaWYgbm90IG1hdGNoCiAgICBpZiAoICRQYXJhbXtPYmplY3RBdHRyaWJ1dGVzfS0+eyRGaWVsZE5hbWV9IG5lICRQYXJhbXtWYWx1ZX0gKSB7CiAgICAgICAgcmV0dXJuIDA7CiAgICB9CgogICAgcmV0dXJuIDE7Cn0KCnN1YiBIaXN0b3JpY2FsVmFsdWVzR2V0IHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBnZXQgaGlzdG9yaWNhbCB2YWx1ZXMgZnJvbSBkYXRhYmFzZQogICAgbXkgJEhpc3RvcmljYWxWYWx1ZXMgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkRmlsZVZhbHVlJyktPkhpc3RvcmljYWxWYWx1ZUdldCgKICAgICAgICBGaWVsZElEICAgPT4gJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30tPntJRH0sCiAgICAgICAgVmFsdWVUeXBlID0+ICdUZXh0JywKICAgICk7CgogICAgIyByZXR1cm4gdGhlIGhpc3RvcmljYWwgdmFsdWVzIGZyb20gZGF0YWJhc2UKICAgIHJldHVybiAkSGlzdG9yaWNhbFZhbHVlczsKfQoKc3ViIFZhbHVlTG9va3VwIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFZhbHVlID0gZGVmaW5lZCAkUGFyYW17S2V5fSA/ICRQYXJhbXtLZXl9IDogJyc7CgogICAgcmV0dXJuICRWYWx1ZTsKfQoKMTsKCj1iYWNrCgo9aGVhZDEgVEVSTVMgQU5EIENPTkRJVElPTlMKClRoaXMgc29mdHdhcmUgaXMgcGFydCBvZiB0aGUgT1RSUyBwcm9qZWN0IChMPGh0dHA6Ly9vdHJzLm9yZy8+KS4KClRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCnRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIEw8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0Pi4KCj1jdXQK</File>
        <File Location="Kernel/System/DynamicField/Driver/BaseToFile.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vRHluYW1pY0ZpZWxkL0RyaXZlci9CYXNlVG9GaWxlLnBtIC0gRHluYW1pYyBmaWVsZCBiYWNrZW5kIGZ1bmN0aW9ucwojIENvcHlyaWdodCAoQykgMjAwMS0yMDE1IE9UUlMgQUcsIGh0dHA6Ly9vdHJzLmNvbS8KIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6RHJpdmVyOjpCYXNlVG9GaWxlOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIEtlcm5lbDo6U3lzdGVtOjpWYXJpYWJsZUNoZWNrIHF3KDphbGwpOwoKb3VyIEBPYmplY3REZXBlbmRlbmNpZXMgPSAoCiAgICAnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZEZpbGVWYWx1ZScsCiAgICAnS2VybmVsOjpTeXN0ZW06OkxvZycsCik7Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZDo6RHJpdmVyOjpCYXNlVG9GaWxlIC0gY29tbW9uIGZpZWxkcyBiYWNrZW5kIGZ1bmN0aW9ucwoKPWhlYWQxIFNZTk9QU0lTCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKc3ViIFZhbHVlSXNEaWZmZXJlbnQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIHNwZWNpYWwgY2FzZXMgd2hlcmUgdGhlIHZhbHVlcyBhcmUgZGlmZmVyZW50IGJ1dCB0aGV5IHNob3VsZCBiZSByZXBvcnRlZCBhcyBlcXVhbHMKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWUxfSAmJiAoIGRlZmluZWQgJFBhcmFte1ZhbHVlMn0gJiYgJFBhcmFte1ZhbHVlMn0gZXEgJycgKTsKICAgIHJldHVybiBpZiAhZGVmaW5lZCAkUGFyYW17VmFsdWUyfSAmJiAoIGRlZmluZWQgJFBhcmFte1ZhbHVlMX0gJiYgJFBhcmFte1ZhbHVlMX0gZXEgJycgKTsKCiAgICAjIGNvbXBhcmUgdGhlIHJlc3VsdHMKICAgIHJldHVybiBEYXRhSXNEaWZmZXJlbnQoCiAgICAgICAgRGF0YTEgPT4gXCRQYXJhbXtWYWx1ZTF9LAogICAgICAgIERhdGEyID0+IFwkUGFyYW17VmFsdWUyfQogICAgKTsKfQoKc3ViIFZhbHVlRGVsZXRlIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgJFN1Y2Nlc3MgPSAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6RHluYW1pY0ZpZWxkRmlsZVZhbHVlJyktPlZhbHVlRGVsZXRlKAogICAgICAgIEZpZWxkSUQgID0+ICRQYXJhbXtEeW5hbWljRmllbGRDb25maWd9LT57SUR9LAogICAgICAgIE9iamVjdElEID0+ICRQYXJhbXtPYmplY3RJRH0sCiAgICAgICAgVXNlcklEICAgPT4gJFBhcmFte1VzZXJJRH0sCiAgICApOwoKICAgIHJldHVybiAkU3VjY2VzczsKfQoKc3ViIEFsbFZhbHVlc0RlbGV0ZSB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICRTdWNjZXNzID0gJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkR5bmFtaWNGaWVsZEZpbGVWYWx1ZScpLT5BbGxWYWx1ZXNEZWxldGUoCiAgICAgICAgRmllbGRJRCA9PiAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e0lEfSwKICAgICAgICBVc2VySUQgID0+ICRQYXJhbXtVc2VySUR9LAogICAgKTsKCiAgICByZXR1cm4gJFN1Y2Nlc3M7Cn0KCnN1YiBIYXNCZWhhdmlvciB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgcmV0dXJuIGZhaWwgaWYgQmVoYXZpb3JzIGhhc2ggZG9lcyBub3QgZXhpc3RzCiAgICByZXR1cm4gaWYgIUlzSGFzaFJlZldpdGhEYXRhKCAkU2VsZi0+e0JlaGF2aW9yc30gKTsKCiAgICAjIHJldHVybiBzdWNjZXNzIGlmIHRoZSBkeW5hbWljIGZpZWxkIGhhcyB0aGUgZXhwZWN0ZWQgYmVoYXZpb3IKICAgIHJldHVybiBJc1Bvc2l0aXZlSW50ZWdlciggJFNlbGYtPntCZWhhdmlvcnN9LT57ICRQYXJhbXtCZWhhdmlvcn0gfSApOwoKICAgICMgb3RoZXJ3aXNlIHJldHVybiBmYWlsCiAgICByZXR1cm47Cn0KCnN1YiBTZWFyY2hGaWVsZFByZWZlcmVuY2VzIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgbXkgQFByZWZlcmVuY2VzID0gKAogICAgICAgIHsKICAgICAgICAgICAgVHlwZSAgICAgICAgPT4gJycsCiAgICAgICAgICAgIExhYmVsU3VmZml4ID0+ICcnLAogICAgICAgIH0sCiAgICApOwoKICAgIHJldHVybiBcQFByZWZlcmVuY2VzOwp9Cgo9aXRlbSBFZGl0TGFiZWxSZW5kZXIoKQoKY3JlYXRlcyB0aGUgbGFiZWwgSFRNTCB0byBiZSB1c2VkIGluIGVkaXQgbWFza3MuCgogICAgbXkgJExhYmVsSFRNTCA9ICRCYWNrZW5kT2JqZWN0LT5FZGl0TGFiZWxSZW5kZXIoCiAgICAgICAgRHluYW1pY0ZpZWxkQ29uZmlnID0+ICREeW5hbWljRmllbGRDb25maWcsICAgICAgIyBjb21wbGV0ZSBjb25maWcgb2YgdGhlIER5bmFtaWNGaWVsZAogICAgICAgIEZpZWxkTmFtZSAgICAgICAgICA9PiAnVGhlRmllbGQnLCAgICAgICAgICAgICAgICMgdGhlIHZhbHVlIHRvIGJlIHNldCBvbiB0aGUgJ2ZvcicgYXR0cmlidXRlCiAgICAgICAgQWRkaXRpb25hbFRleHQgICAgID0+ICdCZXR3ZWVuJyAgICAgICAgICAgICAgICAgIyBvdGhlciB0ZXh0IHRvIGJlIHBsYWNlZCBuZXh0IHRvIEZpZWxkTmFtZQogICAgICAgIE1hbmRhdG9yeSAgICAgICAgICA9PiAxLCAgICAgICAgICAgICAgICAgICAgICAgICMgMCBvciAxLAogICAgKTsKCj1jdXQKCnN1YiBFZGl0TGFiZWxSZW5kZXIgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGNoZWNrIG5lZWRlZCBzdHVmZgogICAgZm9yIG15ICROZWVkZWQgKHF3KER5bmFtaWNGaWVsZENvbmZpZyBGaWVsZE5hbWUpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFteyROZWVkZWR9ICkgewogICAgICAgICAgICAkS2VybmVsOjpPTS0+R2V0KCdLZXJuZWw6OlN5c3RlbTo6TG9nJyktPkxvZygKICAgICAgICAgICAgICAgIFByaW9yaXR5ID0+ICdlcnJvcicsCiAgICAgICAgICAgICAgICBNZXNzYWdlICA9PiAiTmVlZCAkTmVlZGVkISIKICAgICAgICAgICAgKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KCiAgICAjIGNoZWNrIER5bmFtaWNGaWVsZENvbmZpZyAoZ2VuZXJhbCkKICAgIGlmICggIUlzSGFzaFJlZldpdGhEYXRhKCAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfSApICkgewogICAgICAgICRLZXJuZWw6Ok9NLT5HZXQoJ0tlcm5lbDo6U3lzdGVtOjpMb2cnKS0+TG9nKAogICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICBNZXNzYWdlICA9PiAiVGhlIGZpZWxkIGNvbmZpZ3VyYXRpb24gaXMgaW52YWxpZCIsCiAgICAgICAgKTsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgIyBjaGVjayBEeW5hbWljRmllbGRDb25maWcgKGludGVybmFsbHkpCiAgICBmb3IgbXkgJE5lZWRlZCAocXcoTGFiZWwpKSB7CiAgICAgICAgaWYgKCAhJFBhcmFte0R5bmFtaWNGaWVsZENvbmZpZ30tPnskTmVlZGVkfSApIHsKICAgICAgICAgICAgJEtlcm5lbDo6T00tPkdldCgnS2VybmVsOjpTeXN0ZW06OkxvZycpLT5Mb2coCiAgICAgICAgICAgICAgICBQcmlvcml0eSA9PiAnZXJyb3InLAogICAgICAgICAgICAgICAgTWVzc2FnZSAgPT4gIk5lZWQgJE5lZWRlZCBpbiBEeW5hbWljRmllbGRDb25maWchIgogICAgICAgICAgICApOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIG15ICROYW1lICAgICAgPSAkUGFyYW17RmllbGROYW1lfTsKICAgIG15ICRMYWJlbFRleHQgPSAkUGFyYW17RHluYW1pY0ZpZWxkQ29uZmlnfS0+e0xhYmVsfTsKCiAgICBteSAkTGFiZWxJRCAgICA9ICdMYWJlbCcgLiAkUGFyYW17RmllbGROYW1lfTsKICAgIG15ICRIVE1MU3RyaW5nID0gJyc7CgogICAgaWYgKCAkUGFyYW17TWFuZGF0b3J5fSApIHsKCiAgICAgICAgIyBvcGVuaW5nIHRhZwogICAgICAgICRIVE1MU3RyaW5nID0gPDwiRU9GIjsKPGxhYmVsIGlkPSIkTGFiZWxJRCIgZm9yPSIkTmFtZSIgY2xhc3M9Ik1hbmRhdG9yeSI+CiAgICA8c3BhbiBjbGFzcz0iTWFya2VyIj4qPC9zcGFuPgpFT0YKICAgIH0KICAgIGVsc2UgewoKICAgICAgICAjIG9wZW5pbmcgdGFnCiAgICAgICAgJEhUTUxTdHJpbmcgPSA8PCJFT0YiOwo8bGFiZWwgaWQ9IiRMYWJlbElEIiBmb3I9IiROYW1lIj4KRU9GCiAgICB9CgogICAgIyB0ZXh0CiAgICAkSFRNTFN0cmluZyAuPSAkUGFyYW17TGF5b3V0T2JqZWN0fS0+QXNjaWkySHRtbCgKICAgICAgICBUZXh0ID0+ICRQYXJhbXtMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5UcmFuc2xhdGUoIiRMYWJlbFRleHQiKQogICAgKTsKICAgIGlmICggJFBhcmFte0FkZGl0aW9uYWxUZXh0fSApIHsKICAgICAgICAkSFRNTFN0cmluZyAuPSAiICgiOwogICAgICAgICRIVE1MU3RyaW5nIC49ICRQYXJhbXtMYXlvdXRPYmplY3R9LT5Bc2NpaTJIdG1sKAogICAgICAgICAgICBUZXh0ID0+ICRQYXJhbXtMYXlvdXRPYmplY3R9LT57TGFuZ3VhZ2VPYmplY3R9LT5UcmFuc2xhdGUoIiRQYXJhbXtBZGRpdGlvbmFsVGV4dH0iKQogICAgICAgICk7CiAgICAgICAgJEhUTUxTdHJpbmcgLj0gIikiOwogICAgfQogICAgJEhUTUxTdHJpbmcgLj0gIjpcbiI7CgogICAgIyBjbG9zaW5nIHRhZwogICAgJEhUTUxTdHJpbmcgLj0gPDwiRU9GIjsKPC9sYWJlbD4KRU9GCgogICAgcmV0dXJuICRIVE1MU3RyaW5nOwp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKEw8aHR0cDovL290cnMub3JnLz4pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgTDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQ+LgoKPWN1dAo=</File>
    </Filelist>
    <DatabaseInstall>
        <TableCreate Type="post" Name="df_attachment">
            <Column AutoIncrement="true" Name="id" PrimaryKey="true" Required="true" Size="20" Type="BIGINT"></Column>
            <Column Name="article_id" Required="true" Size="20" Type="BIGINT"></Column>
            <Column Name="filename" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="content_size" Required="true" Size="30" Type="INTEGER"></Column>
            <Column Name="content_type" Required="true" Size="30" Type="VARCHAR"></Column>
            <Column Name="content_id" Required="true" Size="250" Type="VARCHAR"></Column>
            <Column Name="content_alternative" Required="true" Size="50" Type="VARCHAR"></Column>
            <Column Name="content" Required="true" Type="LONGBLOB"></Column>
            <Column Name="create_time" Required="true" Type="DATE"></Column>
            <Column Name="create_by" Required="true" Size="11" Type="INTEGER"></Column>
            <Column Name="change_time" Required="true" Type="DATE"></Column>
            <Column Name="change_by" Required="true" Size="11" Type="INTEGER"></Column>
            <Column Name="deleted" Required="true" Size="1" Type="SMALLINT"></Column>
            <Column Name="form_id" Required="true" Size="50" Type="VARCHAR"></Column>
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUninstall>
        <TableDrop Type="post" Name="df_attachment">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>